<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InplaceEditBoxLib</name>
    </assembly>
    <members>
        <member name="T:InplaceEditBoxLib.Events.RequestEditEvent">
            <summary>
            Определите тип события редактирования, которое может быть запрошено из представления.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Events.RequestEditEvent.StartEditMode">
            <summary>
            Запустите режим редактирования для переименования элемента, представленного
            моделью просмотра, которая отправляет это сообщение своему представлению.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Events.RequestEditEvent.Unknown">
            <summary>
            Неизвестный тип события никогда не должен происходить, если это перечисление используется правильно.
            </summary>
        </member>
        <member name="T:InplaceEditBoxLib.Events.RequestEditEventHandler">
            <summary>
            Метод делегирования обработчика событий, который будет использоваться при обработке событий <seealso cref = "T:InplaceEditBoxLib.Events.RequestEdit" />.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:InplaceEditBoxLib.Events.RequestEdit">
            <summary>
            Реализует событие, которое может быть отправлено из модели
            просмотра для запроса определенных режимов редактирования.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Events.RequestEdit.#ctor(InplaceEditBoxLib.Events.RequestEditEvent)">
            <summary>
            Конструктор параметризованного класса
            </summary>
            <param name="eventRequest"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Events.RequestEdit.#ctor">
            <summary>
            Конструктор класса
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Events.RequestEdit.Request">
            <summary>
            Получает тип события редактирования, запрошенного моделью просмотра.
            </summary>
        </member>
        <member name="T:InplaceEditBoxLib.Interfaces.IEditBox">
            <summary>
            Реализовать интерфейс, который позволяет модели просмотра 
            взаимодействовать с элементом управления <seealso cref="T:InplaceEditBoxLib.Views.EditBox"/>.
            </summary>
        </member>
        <member name="E:InplaceEditBoxLib.Interfaces.IEditBox.RequestEdit">
            <summary>
            Модель просмотра может инициировать это событие, чтобы запросить редактирование
            имени элемента, чтобы запустить процесс переименования с помощью элемента управления
            <seealso cref="T:InplaceEditBoxLib.Views.EditBox"/>. Элемент управления запустит команду,
            привязанную к свойству зависимости команды (если есть) с новым именем в качестве параметра
            (если редактирование не было отменено (через escape) тем временем.
            </summary>
        </member>
        <member name="T:InplaceEditBoxLib.Local.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.ForbiddenRenameKeys">
            <summary>
              Looks up a localized string similar to \/:*?&quot;&lt;&gt;|.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.ForbiddenRenameKeysMessage">
             <summary>
               Looks up a localized string similar to A name cannot contain any of the following characters:
            \/:*?&quot;&lt;&gt;|.
             </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.ForbiddenRenameKeysTitle">
            <summary>
              Looks up a localized string similar to Invalid Character Input.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.STR_MSG_InvalidChar_TITLE">
            <summary>
              Looks up a localized string similar to Input Error.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Local.Strings.STR_MSG_UnknownError">
            <summary>
              Looks up a localized string similar to An error occured..
            </summary>
        </member>
        <member name="T:InplaceEditBoxLib.Themes.ResourceKeys">
            <summary>
            Class member act as a reference for resource dictionary based definitions.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Themes.ResourceKeys.NormalForegroundKey">
            <summary>
            Цветовой ключ для нормального переднего плана
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Themes.ResourceKeys.NormalForegroundBrushKey">
            <summary>
            Кисть для нормального переднего плана
            </summary>
        </member>
        <member name="T:InplaceEditBoxLib.ViewModels.Base.ViewModelBase">
            <summary>
            Base of Viewmodel classes implemented in this assembly.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.ViewModels.Base.ViewModelBase.#ctor">
            <summary>
            Standard <seealso cref="T:InplaceEditBoxLib.ViewModels.Base.ViewModelBase"/> class constructor
            </summary>
        </member>
        <member name="E:InplaceEditBoxLib.ViewModels.Base.ViewModelBase.PropertyChanged">
            <summary>
            Standard event of the <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.ViewModels.Base.ViewModelBase.RaisePropertyChanged(System.String)">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display
            for the viewmodel property indicated as string.
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:InplaceEditBoxLib.ViewModels.Base.ViewModelBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display.
            
            Sample call: this.OnPropertyChanged(() => this.IsSelected);
            where 'this' is derived from <seealso cref="T:InplaceEditBoxLib.ViewModels.Base.ViewModelBase"/>
            and IsSelected is a property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="T:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel">
            <summary>
            Реализует класс модели просмотра, который может использоваться в качестве
            основы модели просмотра, управляющей представлением <seealso cref = "T:InplaceEditBoxLib.Views.EditBox" />.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.Logger">
            <summary>
            Средство ведения журнала Log4net для этого класса.
            </summary>
        </member>
        <member name="E:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.ShowNotificationMessage">
            <summary>
            Предоставьте событие, которое запускается, когда модель просмотра
            сообщает свое представление: Вот еще одно сообщение с уведомлением,
            пожалуйста, покажите его пользователю.
            </summary>
        </member>
        <member name="E:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.RequestEdit">
            <summary>
            Предоставьте событие, которое запускается, когда модель просмотра 
            запрашивает у своего представления запуск режима редактирования для переименования этого элемента.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.#ctor">
            <summary>
            Конструктор класса
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.IsReadOnly">
            <summary>
            Получает / устанавливает, доступна ли эта папка только для чтения
            (может быть переименована) или нет. Например, диск нельзя переименовать,
            и поэтому он доступен только для чтения в этом контексте.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.RequestEditMode(InplaceEditBoxLib.Events.RequestEditEvent)">
            <summary>
            Вызовите этот метод, чтобы запросить запуск режима редактирования для переименования этого элемента.
            </summary>
            <param name="request"></param>
            <returns> Возвращает истину, если событие было успешно отправлено (слушатель прикреплен), в противном случае - ложь. </returns>
        </member>
        <member name="M:InplaceEditBoxLib.ViewModels.EditInPlaceViewModel.ShowNotification(System.String,System.String,System.Windows.Media.Imaging.BitmapImage)">
            <summary>
            Показывает всплывающее уведомление с заданным заголовком и текстом.
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="imageIcon"></param>
            <returns>истина, если событие было успешно запущено.</returns>
        </member>
        <member name="T:InplaceEditBoxLib.Views.Attach">
            <summary>
            Реализует поведение, которое можно использовать для прикрепления входных привязок к стилю (например, TreeViewItem).
            https://stackoverflow.com/questions/2660760/defining-inputbindings-within-a-style#7808997
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.Attach.GetInputBindings(System.Windows.UIElement)">
            <summary>
            Получает свойство зависимости «InputBindings».
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:InplaceEditBoxLib.Views.Attach.SetInputBindings(System.Windows.UIElement,System.Windows.Input.InputBindingCollection)">
            <summary>
            Устанавливает свойство зависимости «InputBindings».
            </summary>
        </member>
        <member name="T:InplaceEditBoxLib.Views.BindingProxy">
            <summary>
            Реализует прокси XAML, который можно использовать для привязки элементов (TreeViewItem,
            ListViewItem и т. Д.) К модели просмотра, которая управляет коллекциями.
            
            Source: http://www.thomaslevesque.com/2011/03/21/wpf-how-to-bind-to-data-when-the-datacontext-is-not-inherited/
             Issue: http://stackoverflow.com/questions/9994241/mvvm-binding-command-to-contextmenu-item
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.BindingProxy.DataProperty">
             <summary>
             Резервное хранилище свойства зависимости данных.
            
             Получает / устанавливает объект данных, который этот класс
             пересылает всем, у кого есть ссылка на этот объект.
             </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.BindingProxy.Data">
            <summary>
            Получает / устанавливает объект данных, который этот класс
            пересылает всем, у кого есть ссылка на этот объект.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.BindingProxy.CreateInstanceCore">
            <summary>
            Переопределения Freezable
            </summary>
            <returns></returns>
        </member>
        <member name="T:InplaceEditBoxLib.Views.EditBox">
            <summary>
            EditBox is a custom cotrol that can switch between two modes: 
            editing and normal. When it is in editing mode, the content is
            displayed in a TextBox that provides editing capbabilities. When 
            the EditBox is in normal, its content is displayed in a TextBlock
            that is not editable.
            
            This control is designed to be used in an item that is part of a
            ItemsControl collection (ListView, GridView, ListBox, TreeView).
            
            This code used part of ATC Avalon Team's work
            (http://blogs.msdn.com/atc_avalon_team/archive/2006/03/14/550934.aspx)
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.TextProperty">
            <summary>
            TextProperty DependencyProperty should be used to indicate
            the string that should be edit in the <seealso cref="T:InplaceEditBoxLib.Views.EditBox"/> control.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.DisplayTextProperty">
            <summary>
            Backing storage of DisplayText dependency property should be used to indicate
            the string that should displayed when <seealso cref="T:InplaceEditBoxLib.Views.EditBox"/>
            control is not in edit mode.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.IsEditingProperty">
            <summary>
            IsEditingProperty DependencyProperty
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.mIsReadOnlyProperty">
            <summary>
            Implement dependency property to determine whether editing data is allowed or not
            (control never enters editing mode if IsReadOnly is set to true [default is false])
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.RenameCommandProperty">
            <summary>
            Send a Rename command request to the ViewModel if renaming has been executed
            
            1> Control entered Edit mode
            2> String changed
            3> Control left Edit Mode (with Enter or F2)
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.RenameCommandParameter">
            <summary>
            Bind this parameter to supply additional information (such as item renamed)
            in rename command binding.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.InvalidInputCharactersProperty">
            <summary>
            Backing store of dependency property
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.InvalidInputCharactersErrorMessageProperty">
            <summary>
            Backing store of dependency property
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.InvalidInputCharactersErrorMessageTitleProperty">
            <summary>
            Backing store of dependency property
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.IsEditableOnDoubleClickProperty">
            <summary>
            This property can be used to enable/disable mouse "double click"
            gesture to start the edit mode (edit mode may also be started via
            context menu or F2 key only).
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.MaximumClickTimeProperty">
            <summary>
            The maximum time between the last click and the current one that will allow the user to edit the text block.
            This will allow the user to still be able to "double click to close" the TreeViewItem.
            Default is 700 ms.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox.MinimumClickTimeProperty">
            <summary>
            The minimum time between the last click and the current one that will allow the user to edit the text block.
            This will help prevent against accidental edits when they are double clicking.
            Default is 300 ms.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox._lockObject">
            <summary>
            This object is used to secure thread safe methods by using the lock statement
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox._Adorner">
            <summary>
            This is the adorner that is visible when the
            <seealso cref="T:InplaceEditBoxLib.Views.EditBox"/> is in editing mode.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox._TextBox">
            <summary>
            A TextBox in the visual tree
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox._ParentItemsControl">
            <summary>
            This refers to the <seealso cref="T:System.Windows.Controls.ItemsControl"/> (TreeView/listView/ListBox)
            control that contains the EditBox
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBox._ViewModel">
            <summary>
            This field points to a viewmodel that keeps the command binding and event triggering
            to base the notifications on. This enables the viewmodel to send events (notifications)
            for processing to the view.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.Text">
            <summary>
            Gets the text value for editing in the
            text portion of the EditBox.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.DisplayText">
            <summary>
            Gets the text to display.
            
            The DisplayText dependency property should be used to indicate
            the string that should displayed when <seealso cref="T:InplaceEditBoxLib.Views.EditBox"/>
            control is not in edit mode.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.IsReadOnly">
            <summary>
            Implement dependency property to determine whether editing data is allowed or not
            (control never enters efiting mode if IsReadOnly is set to true [default is false])
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.ParentScrollViewer">
            <summary>
            Gets the scrollviewer in which this control is embeded.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.IsEditing">
            <summary>
            Gets Editing mode which is true if the EditBox control
            is in editing mode, otherwise false.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.RenameCommand">
            <summary>
            Gets the command that is executed (if any is bound)
            to request a rename process via viemodel delegation.
            
            The command parameter is a tuple containing the new name
            (as string) and the bound viewmodel on the datacontext
            of this control (as object). The CommandParameter is
            created by the control itself an needs no extra binding statement.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.IsEditableOnDoubleClick">
            <summary>
            This property can be used to enable/disable maouse "double click"
            gesture to start the edit mode (edit mode may also be started via
            context menu or F2 key only).
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.InvalidInputCharacters">
            <summary>
            Gets/sets the string dependency property that contains the characters
            that are considered to be invalid in the textbox input overlay element.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.InvalidInputCharactersErrorMessage">
            <summary>
            Gets/sets the string dependency property that contains the error message
            that is shown when the user enters an invalid key.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.InvalidInputCharactersErrorMessageTitle">
            <summary>
            Gets/sets the string dependency property that contains
            the title of the error message that is shown when the user
            enters an invalid key. This title is similar to a window
            caption but it is not a window caption since the error message
            is shown in a custom pop-up element.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.MinimumClickTime">
            <summary>
            The minimum time between the last click and the current one that will allow the user to edit the text block.
            This will help prevent against accidental edits when they are double clicking.
            </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBox.MaximumClickTime">
            <summary>
            The maximum time between the last click and the current one that will allow the user to edit the text block.
            This will allow the user to still be able to "double click to close" the TreeViewItem.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnApplyTemplate">
            <summary>
            Called when the tree for the EditBox has been generated.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnEditBox_Unloaded(System.Object,System.EventArgs)">
            <summary>
            Free notification resources when parent window is being closed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method is invoked when the datacontext is changed.
            This requires changing event hook-up on attached viewmodel to enable
            notification event conversion from viewmodel into view.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.TextBlock_LeftMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Source: http://www.codeproject.com/Articles/31592/Editable-TextBlock-in-WPF-for-In-place-Editing
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.ViewModel_RequestEdit(System.Object,InplaceEditBoxLib.Events.RequestEdit)">
            <summary>
            Method is invoked when the viewmodel tells the view: Start to edit the name of the item we represent.
            (eg: Start to rename a folder).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.ViewModel_ShowNotificationMessage(System.Object,UserNotification.Events.ShowNotificationEvent)">
            <summary>
            Method is invoked when the viewmodel tells the view: Show another notification to the user.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.ShowNotification(System.String,System.String,System.Boolean)">
            <summary>
            Shows a notification warning to the user to clarify the current application behavior.
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="notifiedFromViewmodel"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnPreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Previews input from TextBox and cancels those characters (with pop-up error message)
            that do not appear to be valid (based on given array of invalid characters and error message.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnTextChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This handler method is called when the dependency property <seealso cref="F:InplaceEditBoxLib.Views.EditBox.TextProperty"/>
            is changed in the data source (the ViewModel). The event is raised to tell the view to update its display.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnTextBoxKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            When an EditBox is in editing mode, pressing the ENTER or F2
            keys switches the EditBox to normal mode.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnTextBoxLostKeyboardFocus(System.Object,System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            If an EditBox loses focus while it is in editing mode, 
            the EditBox mode switches to normal mode.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Ends the editing mode if textbox loses the focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnScrollViewerChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            If an EditBox is in editing mode and the content of a ListView is
            scrolled, then the EditBox switches to normal mode.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnSwitchToNormalMode(System.Boolean)">
            <summary>
            Sets IsEditing to false when the ViewItem that contains an EditBox changes its size
            </summary>
            <param name="bCancelEdit"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnSwitchToEditingMode">
            <summary>
            Displays the adorner textbox to let the user edit the text string.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.HookItemsControlEvents">
            <summary>
            Walk the visual tree to find the ItemsControl and 
            hook into some of its events. This is done to make
            sure that editing is cancelled whenever
            
              1> The parent control is scrolling its content
            1.1> The MouseWheel is used
              2> A user clicks outside the adorner control
              3> The parent control changes its size
            
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.GetDpObjectFromVisualTree(System.Windows.DependencyObject,System.Type)">
            <summary>
            Walk visual tree to find the first DependencyObject of a specific type.
            (This method works for finding a ScrollViewer within a TreeView).
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Walk visual tree to find the first DependencyObject of a specific type.
            (This method works for finding a ScrollViewer within a TreeView).
            Source: http://stackoverflow.com/questions/3963341/get-reference-to-my-wpf-listboxs-scrollviewer-in-c
            </summary>
            <typeparam name="childItem"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.DestroyTip">
            <summary>
            Destroys the notification object to ensure the window is closed when control exits.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnTextBoxLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            When Layout finish, if in editable mode, update focus status on TextBox.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBox.OnMouseDownOutsideElement(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Escape Edit Mode when the user clicks outside of the textbox
            https://stackoverflow.com/questions/6489032/wpf-remove-focus-when-clicking-outside-of-a-textbox#6489274
            
            Thanks for helpful hints to Alaa Ben Fatma.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:InplaceEditBoxLib.Views.EditBoxAdorner">
            <summary>
            Класс украшения, который содержит TextBox, чтобы предоставить возможность
            редактирования для элемента управления EditBox. Редактируемый TextBox находится
            в AdornerLayer. Когда EditBox находится в режиме редактирования, TextBox получает
            желаемый размер; в противном случае расположите его по размеру (0,0,0,0).
            
            В этом коде использовалась часть работы команды ATC Avalon.
            (http://blogs.msdn.com/atc_avalon_team/archive/2006/03/14/550934.aspx)
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner.ExtraWidth">
            <summary>
            Дополнительное заполнение для содержимого, когда оно отображается в TextBox
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner._VisualChildren">
            <summary>
            Визуальные дети
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner._EditBox">
            <summary>
            Элемент управления, содержащий элементы управления Adorned
            и Adorner. Эта ссылка требуется для вычисления ширины
            окружающего средства просмотра прокрутки.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner._TextBox">
            <summary>
            Текстовое поле, которое закрывает этот декоративный элемент.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner._IsVisible">
            <summary>
            Находится ли EditBox в режиме редактирования, что означает, что Adorner виден.
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner._Canvas">
            <summary>
            Canvas, содержащий TextBox, который обеспечивает возможность отображения
            большего размера, чем текущий размер ячейки, так что все содержимое ячейки
            может быть отредактировано
            </summary>
        </member>
        <member name="F:InplaceEditBoxLib.Views.EditBoxAdorner._TextBoxMaxWidth">
            <summary>
            Максимальный размер текстового поля в зависимости от окружающего средства просмотра
            прокрутки вычисляется по запросу в методе измерения и становится недействительным при изменении видимости Adorner.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBoxAdorner.#ctor(System.Windows.UIElement,System.Windows.Controls.TextBox,InplaceEditBoxLib.Views.EditBox)">
            <summary>
            Inialize the EditBoxAdorner.
            
              +---> adorningElement (TextBox)
              |
            adornedElement (TextBlock)
            </summary>
            <param name="adornedElement"></param>
            <param name="adorningElement"></param>
            <param name="editBox"></param>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBoxAdorner.VisualChildrenCount">
             <summary>
            override для возврата информации о визуальном дереве.
             </summary>
        </member>
        <member name="P:InplaceEditBoxLib.Views.EditBoxAdorner.IsTextBoxVisible">
            <summary>
            Получает, отображается ли текстовое поле в данный момент или нет.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBoxAdorner.UpdateVisibilty(System.Boolean)">
            <summary>
            Указывает, отображается ли TextBox 
            при изменении свойства IsEditing.
            </summary>
            <param name="isVisible"></param>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBoxAdorner.GetVisualChild(System.Int32)">
            <summary>
            Функция переопределения для возврата информации о визуальном дереве.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBoxAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Функция переопределения для упорядочивания элементов.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBoxAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Переопределить для измерения элементов.
            </summary>
        </member>
        <member name="M:InplaceEditBoxLib.Views.EditBoxAdorner.BuildTextBox(InplaceEditBoxLib.Views.EditBox)">
            <summary>
            Инициализируйте необходимые свойства и перехватите необходимые
            события в TextBox, затем добавьте его в дерево.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
